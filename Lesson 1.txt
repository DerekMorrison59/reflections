Used a command line file compare utitlity called 'FC' to view the differences between versions of code files
Using a program is much easier and more reliable than trying to do it manually
the command line version was still more painful than a basic windowed version.


How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    I was able to concentrate on the small number of lines that had changed

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    I could easily go back to previous working (or buggy) versions to and see what changed

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    I decide when a change is complete, like making 2 changes to the input keys on a game.
	Therefore, I have the old version (probably working) and the new version (which has
	the changes for the new feature) If the new version doesn't work or I don't like it,
	I can easily go back to the previous (working) version. The commit should be made
	after a "logical change" is completed.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Often, in software, adding a new feature or changing a process involves making changes to 
	several files at the same time

How can you use the commands git log and git diff to view the history of files?

    git log shows you every commit (starting with the most recent)
	- commit ID
	- Author of the commit
	- Date & Time
	- comment
	
	git diff shows all changes made between any 2 commits
	- the plus sign (and green color) is used for lines that were added
	- the minus sign (and red color) is used for linew that were removed
	- white text is used to show several lines before and after the change
	  to provide context

How might using version control make you more confident to make changes that
could break something?

    I know that I can always go back to the last working commit (version)

Now that you have your workspace set up, what do you want to try using Git for?

    I will use it for the Android Developer Nano Degree
	
	