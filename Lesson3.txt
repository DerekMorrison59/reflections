When would you want to use a remote repository rather than keeping all your work local?

* to share with other people
* to keep a backup incase of *oops*
* to be able to get a copy of my own code on a different computer


Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

* you might get a bunch of code that you don't want from the remote
* it's hard to make local changes if Git is always trying to keep up-to-date with the remote
* your local copy might become unexpectedly broken


Describe the differences between forks, clones, and branches. When would you use one instead of another?

A fork makes a copy of a repository on a remote site (like GitHub) and puts it in your own account on the remote site.
(I made a complete copy of the recipes repository using the fork command to copy from Larry's repo to my own)
A clone makes a copy of a repository from a local or remote location and puts in on your local machine.
(I've used clone a couple of times to get code from Github. That was a starting point to modify an existing project)
A branch can occur on either a local or remote location and just means that there are 2 paths in the code with a common commit.
(the common commit is the point at which the branch starts)


What is the benefit of having a copy of the last known state of the remote stored locally?

You can use it offline. Perform 'git diff' and 'git log' commands on any remote branches


How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Just share files in a common directory (like on a server)
No check-ins, compares, extra software, command line

Manually have to do diffs on each modified file
Need to coordiate with other team members about updating files
Hard to know which files other people have changed (look at the time/date stamp?)


When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

To test a new feature or idea without breaking the master.
Master - no need to merge the changes in later (small change / quick edits)
Branch - lots of changes or big change (like try a new weather provider)
       - can go on for a long time
	   - can be thrown away
	   - can have 2 different new branches with 2 different approaches being tested simultaneously
	   